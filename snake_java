import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

// Classe Snake che estende JFrame e implementa ActionListener
public class Snake extends JFrame implements ActionListener {
    // Costanti che rappresentano le dimensioni della finestra di gioco e la grandezza di un blocco
    private static final int BOARD_WIDTH = 300;
    private static final int BOARD_HEIGHT = 300;
    private static final int DOT_SIZE = 10;
    private static final int ALL_DOTS = 900;
    private static final int RAND_POS = 29;
    // Array che rappresenta le coordinate x e y di ogni blocco del serpente
    private final int[] x = new int[ALL_DOTS];
    private final int[] y = new int[ALL_DOTS];
    // Variabili che rappresentano la lunghezza del serpente, la posizione della mela e la velocità del gioco
    private int dots;
    private int apple_x;
    private int apple_y;
    private int delay = 140;
    // Variabili che rappresentano la direzione del serpente
    private boolean leftDirection = false;
    private boolean rightDirection = true;
    private boolean upDirection = false;
    private boolean downDirection = false;
    // Variabili che rappresentano lo stato del gioco
    private boolean inGame = true;
    private Timer timer;
    
    // Costruttore della classe Snake
    public Snake() {
        // Chiama il costruttore della classe base
        super("Snake");
        
        // Crea una nuova istanza della classe TAdapter per gestire gli eventi della tastiera
        TAdapter adapter = new TAdapter();
        // Aggiunge l'adapter alla finestra di gioco
        addKeyListener(adapter);
        // Imposta il background della finestra di gioco
        setBackground(Color.black);
        // Imposta le dimensioni della finestra di gioco
        setPreferredSize(new Dimension(BOARD_WIDTH, BOARD_HEIGHT));
        // Disabilita il ridimensionamento della finestra di gioco
        setResizable(false);
        // Centra la finestra di gioco sullo schermo
        pack();
        setLocationRelativeTo(null);
        // Chiude la finestra di gioco quando l'utente preme la X in alto a destra
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // Crea una nuova istanza della classe GamePanel e aggiunge il pannello alla finestra di gioco
        add(new GamePanel());
        // Imposta lo stato del gioco in corso
        inGame = true;
        // Imposta la posizione iniziale del serpente e la lunghezza iniziale a 3 blocchi
        initGame();
        // Imposta un timer che chiama il metodo actionPerformed() ogni volta che scatta, con un ritardo iniziale di 100ms
        timer = new Timer(delay, this);
        timer.start();
    }
    
    // Metodo per impostare la posizione iniziale del serpente e la lunghezza iniziale
    private void initGame() {
        // Imposta la lunghezza iniziale del serpente è di 3 blocchi
        dots = 3;
        // Imposta la posizione x e y di ogni blocco del serpente
        for (int i = 0; i < dots; i++) {
            x[i] = 50 - i * DOT_SIZE;
            y[i] = 50;
        }
        // Genera una nuova posizione casuale per la mela
        locateApple();
    }
    
    // Metodo per generare una nuova posizione casuale per la mela
    private void locateApple() {
        // Crea un nuovo oggetto Random per generare numeri casuali
        Random rand = new Random();
        // Genera un numero casuale tra 0 e 29 per la posizione x e y della mela
        apple_x = rand.nextInt(RAND_POS) * DOT_SIZE;
        apple_y = rand.nextInt(RAND_POS) * DOT_SIZE;
    }
    
    // Metodo per disegnare il serpente e la mela sulla finestra di gioco
    private void doDrawing(Graphics g) {
        // Se il gioco è in corso, disegna il serpente e la mela
        if (inGame) {
            g.setColor(Color.red);
            g.fillOval(apple_x, apple_y, DOT_SIZE, DOT_SIZE);
            for (int i = 0; i < dots; i++) {
                if (i == 0) {
                    g.setColor(Color.green);
                    g.fillRect(x[i], y[i], DOT_SIZE, DOT_SIZE);
                } else {
                    g.setColor(Color.yellow);
                    g.fillRect(x[i], y[i], DOT_SIZE, DOT_SIZE);
                }
            }
            // Sincronizza la finestra di gioco con il buffer di immagine
            Toolkit.getDefaultToolkit().sync();
        } else {
            // Se il gioco è terminato, mostra il messaggio "Game Over" e ferma il timer
            gameOver(g);
        }
    }
    
    // Metodo per gestire la fine del gioco
    private void gameOver(Graphics g) {
        // Crea un oggetto String che contiene il messaggio "Game Over"
        String msg = "Game Over";
        // Crea un nuovo oggetto Font per il messaggio "Game Over"
        g.setColor(Color.white);
        g.drawString(msg, (BOARD_WIDTH - g.getFontMetrics().stringWidth(msg)) / 2, BOARD_HEIGHT / 2);
        // Ferma il timer
        timer.stop();
    }
    
    // Metodo che viene chiamato ogni volta che il timer scatta
    @Override
    public void actionPerformed(ActionEvent e) {
        // Se il gioco è in corso, aggiorna la posizione del serpente e controlla se il serpente ha mangiato la mela o ha collisionato con i bordi o con se stesso
        if (inGame) {
            checkApple();
            checkCollision();
            move();
        }
        // Richiama il metodo repaint() per ridisegnare la finestra di gioco
        repaint();
    }
    
    // Metodo per controllare se il serpente ha mangiato la mela
    private void checkApple() {
        if ((x[0] == apple_x) && (y[0] == apple_y)) {
            // Se la testa del serpente si trova sulla mela, incrementa la lunghezza del serpente e genera una nuova posizione ca
            dots++;
            locateApple();
        }
    }
    
    // Metodo per controllare se il serpente ha collisionato con i bordi o con se stesso
    private void checkCollision() {
        // Controlla se il serpente ha collisionato con i bordi del gioco
        for (int i = dots; i > 0; i--) {
            if ((i > 4) && (x[0] == x[i]) && (y[0] == y[i])) {
                inGame = false;
            }
        }
        if (y[0] >= BOARD_HEIGHT) {
            inGame = false;
        }
        if (y[0] < 0) {
            inGame = false;
        }
        if (x[0] >= BOARD_WIDTH) {
            inGame = false;
        }
        if (x[0] < 0) {
            inGame = false;
        }
        // Se il serpente ha collisionato con i bordi, imposta inGame a false per terminare il gioco
        if (!inGame) {
            timer.stop();
        }
    }
    
    // Metodo per aggiornare la posizione del serpente
    private void move() {
        // Sposta ogni blocco del serpente nella posizione del blocco precedente
        for (int i = dots; i > 0; i--) {
            x[i] = x[(i - 1)];
            y[i] = y[(i - 1)];
        }
        // Sposta la testa del serpente nella direzione corrente
        if (leftDirection) {
            x[0] -= DOT_SIZE;
        }
        if (rightDirection) {
            x[0] += DOT_SIZE;
        }
        if (upDirection) {
            y[0] -= DOT_SIZE;
        }
        if (downDirection) {
            y[0] += DOT_SIZE;
        }
    }
    
    // Classe interna per gestire i tasti premuti dall'utente
    private class TAdapter extends KeyAdapter {
        
        @Override
        public void keyPressed(KeyEvent e) {
            // Ottiene il codice del tasto premuto
            int key = e.getKeyCode();
            // Controlla se il tasto premuto è uno dei tasti freccia
            if ((key == KeyEvent.VK_LEFT) && (!rightDirection)) {
                leftDirection = true;
                upDirection = false;
                downDirection = false;
            }
            if ((key == KeyEvent.VK_RIGHT) && (!leftDirection)) {
                rightDirection = true;
                upDirection = false;
                downDirection = false;
            }
            if ((key == KeyEvent.VK_UP) && (!downDirection)) {
                upDirection = true;
                rightDirection = false;
                leftDirection = false;
            }
            if ((key == KeyEvent.VK_DOWN) && (!upDirection)) {
                downDirection = true;
                rightDirection = false;
                leftDirection = false;
            }
        }
    }
}

